groups:
- name: build
  jobs:
  - yarn-install
  - run-tests
- name: stage
  jobs:
  - stage-deploy
  - stage-automate
- name: prod
  jobs:
  - prod-deploy
  - prod-automate

resource_types:
  - name: npm-cache
    type: docker-image
    source:
      repository: ymedlop/npm-cache-resource
      tag: latest
      yarn-support: true
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest

resources:
  - name: source
    type: git
    source: &repo-source
      uri: ((github-uri))
      check_every: 5s
      branch: ((github-branch))
      private_key: ((github-key))
  - name: dependency-cache
    type: npm-cache
    source:
      <<: *repo-source
      paths:
        - package.json
  - name: slack
    type: slack-notification
    source:
      url: ((slack-hook))

jobs:
  - name: yarn-install
    plan:
      - get: source
        trigger: true
      - get: dependency-cache

  - name: run-tests
    plan:
      - get: source
        trigger: true
        passed: [yarn-install]
      - get: dependency-cache
        passed: [yarn-install]
      - aggregate:
        - task: run lint rules
          file: source/ci/tasks/run_lint.yml
          on_failure:
            put: slack
            params:
              text: ((build-link))
              attachments_file: messages/slack.txt
        - task: run unit tests
          file: source/ci/tasks/run_tests.yml
          on_failure:
            put: slack
            params:
              text: ((build-link))
              attachments_file: messages/slack.txt

  - name: stage-deploy
    plan:
      - get: dependency-cache
      - get: source
        trigger: true
        passed: [run-tests]
      - task: run build
        file: source/ci/tasks/run_build.yml
        params:
          APP_NAME: ((app-name))
          AUTH_AUDIENCE: ((stage-auth-audience))
          AUTH_DOMAIN: ((stage-auth-domain))
          MIXPANEL_TOKEN: ((stage-mixpanel-token))
          NODE_ENV: 'production'
      - task: deploy to stage
        file: source/ci/tasks/run_deploy.yml
        params:
          APP_NAME: ((app-name))
          BRANCH: ((github-branch))
          GCP_SERVICE_ACCOUNT_KEY: ((stage-gcs-token))
          STORAGE_BUCKET: ((stage-bucket))

  - name: stage-automate
    serial_groups: [stage]
    plan:
      - get: source
        trigger: true
        passed: [stage-deploy]
      - get: dependency-cache
        passed: [stage-deploy]
      - task: run automation on stage
        file: source/ci/tasks/run_automation.yml
        params:
          REPO: ((github-uri))
          AT_RUN_IN_BACKGROUND: false,
          STORAGE_BUCKET: ((stage-bucket))
          AT_LOGIN_USERNAME: ((at-login-username))
          AT_LOGIN_PASSWORD: ((at-login-password))
          AUTH_DOMAIN: ((stage-auth-domain))
    on_failure:
      put: slack
      params:
        text: ((build-link))
        attachments_file: messages/slack.txt
    on_success:
      put: slack
      params:
        text: ((build-link))
        attachments_file: messages/slack.txt

  - name: prod-deploy
    plan:
      - get: dependency-cache
      - get: source
        trigger: true
        passed: [stage-automate]
      - task: run build
        file: source/ci/tasks/run_build.yml
        params:
          APP_NAME: ((app-name))
          AUTH_AUDIENCE: ((prod-auth-audience))
          AUTH_DOMAIN: ((prod-auth-domain))
          MIXPANEL_TOKEN: ((prod-mixpanel-token))
          NODE_ENV: 'production'
      - task: deploy to prod
        file: source/ci/tasks/run_deploy.yml
        params:
          APP_NAME: ((app-name))
          BRANCH: ((github-branch))
          GCP_SERVICE_ACCOUNT_KEY: ((prod-gcs-token))
          STORAGE_BUCKET: ((prod-bucket))

  - name: prod-automate
    plan:
      - get: source
        trigger: true
        passed: [prod-deploy]
      - get: dependency-cache
        passed: [prod-deploy]
      - task: run automation on prod
        file: source/ci/tasks/run_automation.yml
        params:
          REPO: ((github-uri))
          AT_RUN_IN_BACKGROUND: true
          STORAGE_BUCKET: ((prod-bucket))
          AT_LOGIN_USERNAME: ((at-login-username))
          AT_LOGIN_PASSWORD: ((at-login-password))
          AUTH_DOMAIN: ((prod-auth-domain))
    # This will always fail unil the prod url is provisioned
    # on_failure:
    #   put: slack
    #   params:
    #     text: ((build-link))
    #     attachments_file: messages/slack.txt
    on_success:
      put: slack
      params:
        text: ((build-link))
        attachments_file: messages/slack.txt
